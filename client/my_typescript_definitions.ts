/*
 Generated by typeshare 1.13.2
*/

export interface Attachment {
  trip_id: string;
  file_id: string;
  activity_id?: string;
}

export interface BudgetingTracker {
  id: string;
  widget_id: string;
  total_budget: Decimal;
  currency: string;
}

export interface Coordinate {
  id: string;
  longitude: number;
  latitude: number;
}

export interface Dates {
  id: string;
  start_date: NaiveDate;
  end_date: NaiveDate;
}

export interface Expense {
  id: string;
  budgeting_tracker_id: string;
  title: string;
  cost: Decimal;
  expense_type: string;
  split_type: string;
}

export interface ExpensePayer {
  id: string;
  user_id: string;
}

export interface File {
  id: string;
  user_id: string;
  file_name: string;
  file_url: string;
  file_hash: string;
  content_type: string;
  created_at: DateTime<Utc>;
}

export interface Itinerary {
  id: string;
  widget_id: string;
  dates_id: string;
  map_id: string;
}

export interface ItineraryActivity {
  id: string;
  itinerary_id: string;
  activity_type: string;
  date_id: string;
  coordinates_id?: string;
  start_time?: PrimitiveDateTime;
  end_time?: PrimitiveDateTime;
  expense_id?: string;
  notes: string;
}

export interface Journal {
  id: string;
  owner_id: string;
  content: string;
  last_edit: DateTime<Utc>;
  created_at: DateTime<Utc>;
}

export interface Map {
  id: string;
  user_id: string;
  map_type: string;
  title: string;
  coordinates_id: string;
}

export interface Marker {
  id: string;
  coordinates_id: string;
  activity_id: string;
}

export interface Section {
  id: string;
  trip_id: string;
  title: string;
  order_rank: number;
}

export interface Trip {
  id: string;
  owner_id: string;
  title: string;
  trip_image: string;
  dates_id: string;
}

/**
 * --- Taken from rust-postgres repository ---
 *
 * The following implementations are provided by this crate, along with the
 * corresponding Postgres types:
 *
 * | Rust type                         | Postgres type(s)                              |
 * |-----------------------------------|-----------------------------------------------|
 * | `bool`                            | BOOL                                          |
 * | `i8`                              | "char"                                        |
 * | `i16`                             | SMALLINT, SMALLSERIAL                         |
 * | `i32`                             | INT, SERIAL                                   |
 * | `u32`                             | OID                                           |
 * | `i64`                             | BIGINT, BIGSERIAL                             |
 * | `f32`                             | REAL                                          |
 * | `f64`                             | DOUBLE PRECISION                              |
 * | `&str`/`String`                   | VARCHAR, CHAR(n), TEXT, CITEXT, NAME, UNKNOWN |
 * |                                   | LTREE, LQUERY, LTXTQUERY                      |
 * | `&[u8]`/`Vec<u8>`                 | BYTEA                                         |
 * | `HashMap<String, Option<String>>` | HSTORE                                        |
 * | `SystemTime`                      | TIMESTAMP, TIMESTAMP WITH TIME ZONE           |
 * | `IpAddr`                          | INET                                          |
 *
 * In addition, some implementations are provided for types in third party
 * crates. These are disabled by default; to opt into one of these
 * implementations, activate the Cargo feature corresponding to the crate's
 * name prefixed by `with-`. For example, the `with-serde_json-1` feature enables
 * the implementation for the `serde_json::Value` type.
 *
 * | Rust type                       | Postgres type(s)                    |
 * |---------------------------------|-------------------------------------|
 * | `chrono::NaiveDateTime`         | TIMESTAMP                           |
 * | `chrono::DateTime<Utc>`         | TIMESTAMP WITH TIME ZONE            |
 * | `chrono::DateTime<Local>`       | TIMESTAMP WITH TIME ZONE            |
 * | `chrono::DateTime<FixedOffset>` | TIMESTAMP WITH TIME ZONE            |
 * | `chrono::NaiveDate`             | DATE                                |
 * | `chrono::NaiveTime`             | TIME                                |
 * | `time::PrimitiveDateTime`       | TIMESTAMP                           |
 * | `time::OffsetDateTime`          | TIMESTAMP WITH TIME ZONE            |
 * | `time::Date`                    | DATE                                |
 * | `time::Time`                    | TIME                                |
 * | `eui48::MacAddress`             | MACADDR                             |
 * | `geo_types::Point<f64>`         | POINT                               |
 * | `geo_types::Rect<f64>`          | BOX                                 |
 * | `geo_types::LineString<f64>`    | PATH                                |
 * | `serde_json::Value`             | JSON, JSONB                         |
 * | `uuid::Uuid`                    | UUID                                |
 * | `bit_vec::BitVec`               | BIT, VARBIT                         |
 * | `eui48::MacAddress`             | MACADDR                             |
 * | `cidr::InetCidr`                | CIDR                                |
 * | `cidr::InetAddr`                | INET                                |
 * | `smol_str::SmolStr`             | VARCHAR, CHAR(n), TEXT, CITEXT,     |
 * |                                 | NAME, UNKNOWN, LTREE, LQUERY,       |
 * |                                 | LTXTQUERY                           |
 */
export interface User {
  id?: string;
  username: string;
  email: string;
  password_hash: string;
  profile_picture_url?: string;
}

export interface UserJournal {
  user_id: string;
  journal_id: string;
}

export interface UserTrip {
  trip_id: string;
  user_id: string;
}

export interface Widget {
  id: string;
  section_id: string;
  widget_type: string;
  order_rank: number;
  width: number;
  height: number;
  content: Value;
}
