/* tslint:disable */
/* eslint-disable */
/**
 * journly-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTrip,
  GetTripResponse,
  GetTripsResponse,
  OkResponse,
} from '../models/index';
import {
    CreateTripFromJSON,
    CreateTripToJSON,
    GetTripResponseFromJSON,
    GetTripResponseToJSON,
    GetTripsResponseFromJSON,
    GetTripsResponseToJSON,
    OkResponseFromJSON,
    OkResponseToJSON,
} from '../models/index';

export interface CreateTripRequest {
    createTrip: CreateTrip;
}

export interface GetTripRequest {
    tripId: string;
}

/**
 * 
 */
export class TripsApi extends runtime.BaseAPI {

    /**
     */
    async createTripRaw(requestParameters: CreateTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponse>> {
        if (requestParameters['createTrip'] == null) {
            throw new runtime.RequiredError(
                'createTrip',
                'Required parameter "createTrip" was null or undefined when calling createTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/trips`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTripToJSON(requestParameters['createTrip']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseFromJSON(jsonValue));
    }

    /**
     */
    async createTrip(requestParameters: CreateTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponse> {
        const response = await this.createTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTripRaw(requestParameters: GetTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTripResponse>> {
        if (requestParameters['tripId'] == null) {
            throw new runtime.RequiredError(
                'tripId',
                'Required parameter "tripId" was null or undefined when calling getTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/trips/{trip_id}`.replace(`{${"trip_id"}}`, encodeURIComponent(String(requestParameters['tripId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTripResponseFromJSON(jsonValue));
    }

    /**
     */
    async getTrip(requestParameters: GetTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTripResponse> {
        const response = await this.getTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTripsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTripsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/trips`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTripsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getTrips(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTripsResponse> {
        const response = await this.getTripsRaw(initOverrides);
        return await response.value();
    }

}
