/* tslint:disable */
/* eslint-disable */
/**
 * journly-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateTripBody
 */
export interface CreateTripBody {
    /**
     * 
     * @type {string}
     * @memberof CreateTripBody
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateTripBody
     */
    'start_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateTripBody
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface EncodableBudgetPlan
 */
export interface EncodableBudgetPlan {
    /**
     * 
     * @type {Array<EncodableExpense>}
     * @memberof EncodableBudgetPlan
     */
    'expenses': Array<EncodableExpense>;
    /**
     * 
     * @type {EncodableGroupBudget}
     * @memberof EncodableBudgetPlan
     */
    'group_budget': EncodableGroupBudget;
    /**
     * 
     * @type {EncodablePersonalBudget}
     * @memberof EncodableBudgetPlan
     */
    'personal_budget': EncodablePersonalBudget;
    /**
     * 
     * @type {boolean}
     * @memberof EncodableBudgetPlan
     */
    'use_personal_budget': boolean;
}
/**
 * 
 * @export
 * @interface EncodableCollaborator
 */
export interface EncodableCollaborator {
    /**
     * 
     * @type {string}
     * @memberof EncodableCollaborator
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableCollaborator
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableCollaborator
     */
    'permission'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableCollaborator
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface EncodableDocument
 */
export interface EncodableDocument {
    /**
     * 
     * @type {string}
     * @memberof EncodableDocument
     */
    'filename': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableDocument
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof EncodableDocument
     */
    'size_bytes': number;
}
/**
 * 
 * @export
 * @interface EncodableExpense
 */
export interface EncodableExpense {
    /**
     * 
     * @type {string}
     * @memberof EncodableExpense
     */
    'cost': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableExpense
     */
    'currency'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableExpense
     */
    'id': string;
    /**
     * 
     * @type {Array<EncodableUserPreview>}
     * @memberof EncodableExpense
     */
    'payers': Array<EncodableUserPreview>;
    /**
     * 
     * @type {string}
     * @memberof EncodableExpense
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface EncodableGroupBudget
 */
export interface EncodableGroupBudget {
    /**
     * 
     * @type {string}
     * @memberof EncodableGroupBudget
     */
    'accommodation_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableGroupBudget
     */
    'activities_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableGroupBudget
     */
    'currency'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableGroupBudget
     */
    'food_dining_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableGroupBudget
     */
    'shopping_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableGroupBudget
     */
    'total_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableGroupBudget
     */
    'transportation_budget': string;
}
/**
 * 
 * @export
 * @interface EncodableItineraryItem
 */
export interface EncodableItineraryItem {
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'activity_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'cost': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'end_time'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'location'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'notes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'start_time'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableItineraryItem
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface EncodablePersonalBudget
 */
export interface EncodablePersonalBudget {
    /**
     * 
     * @type {string}
     * @memberof EncodablePersonalBudget
     */
    'accommodation_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodablePersonalBudget
     */
    'activities_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodablePersonalBudget
     */
    'currency'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodablePersonalBudget
     */
    'food_dining_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodablePersonalBudget
     */
    'shopping_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodablePersonalBudget
     */
    'total_budget': string;
    /**
     * 
     * @type {string}
     * @memberof EncodablePersonalBudget
     */
    'transportation_budget': string;
}
/**
 * 
 * @export
 * @interface EncodableTripData
 */
export interface EncodableTripData {
    /**
     * 
     * @type {string}
     * @memberof EncodableTripData
     */
    'banner_image'?: string | null;
    /**
     * 
     * @type {EncodableBudgetPlan}
     * @memberof EncodableTripData
     */
    'budget_plan': EncodableBudgetPlan;
    /**
     * 
     * @type {Array<EncodableCollaborator>}
     * @memberof EncodableTripData
     */
    'collaborators': Array<EncodableCollaborator>;
    /**
     * 
     * @type {Array<EncodableDocument>}
     * @memberof EncodableTripData
     */
    'documents': Array<EncodableDocument>;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripData
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripData
     */
    'id': string;
    /**
     * 
     * @type {Array<EncodableItineraryItem>}
     * @memberof EncodableTripData
     */
    'itinerary': Array<EncodableItineraryItem>;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripData
     */
    'start_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripData
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface EncodableTripOverview
 */
export interface EncodableTripOverview {
    /**
     * 
     * @type {string}
     * @memberof EncodableTripOverview
     */
    'banner_image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripOverview
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripOverview
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof EncodableTripOverview
     */
    'no_collaborators': number;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripOverview
     */
    'start_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableTripOverview
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface EncodableUser
 */
export interface EncodableUser {
    /**
     * 
     * @type {string}
     * @memberof EncodableUser
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableUser
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface EncodableUserPreview
 */
export interface EncodableUserPreview {
    /**
     * 
     * @type {string}
     * @memberof EncodableUserPreview
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EncodableUserPreview
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EncodableUserPreview
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GetMeResponse
 */
export interface GetMeResponse {
    /**
     * 
     * @type {EncodableUser}
     * @memberof GetMeResponse
     */
    'user': EncodableUser;
}
/**
 * 
 * @export
 * @interface GetTripResponse
 */
export interface GetTripResponse {
    /**
     * 
     * @type {EncodableTripData}
     * @memberof GetTripResponse
     */
    'trip': EncodableTripData;
}
/**
 * 
 * @export
 * @interface GetTripsResponse
 */
export interface GetTripsResponse {
    /**
     * 
     * @type {Array<EncodableTripOverview>}
     * @memberof GetTripsResponse
     */
    'trips': Array<EncodableTripOverview>;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 
     * @type {EncodableUser}
     * @memberof GetUserResponse
     */
    'user': EncodableUser;
}
/**
 * 
 * @export
 * @interface GetUsersResponse
 */
export interface GetUsersResponse {
    /**
     * 
     * @type {Array<EncodableUser>}
     * @memberof GetUsersResponse
     */
    'users': Array<EncodableUser>;
}
/**
 * 
 * @export
 * @interface LoginCredentials
 */
export interface LoginCredentials {
    /**
     * 
     * @type {string}
     * @memberof LoginCredentials
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginCredentials
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface OkResponse
 */
export interface OkResponse {
    /**
     * 
     * @type {boolean}
     * @memberof OkResponse
     */
    'ok': boolean;
}
/**
 * 
 * @export
 * @interface PasswordUpdateRequest
 */
export interface PasswordUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordUpdateRequest
     */
    'current_password': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordUpdateRequest
     */
    'new_password': string;
}
/**
 * 
 * @export
 * @interface RefreshResponse
 */
export interface RefreshResponse {
    /**
     * 
     * @type {string}
     * @memberof RefreshResponse
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof RefreshResponse
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface RefreshTokenBody
 */
export interface RefreshTokenBody {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenBody
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface RegisterUserBody
 */
export interface RegisterUserBody {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserBody
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserBody
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserBody
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface RegisterUserResponse
 */
export interface RegisterUserResponse {
    /**
     * 
     * @type {EncodableUser}
     * @memberof RegisterUserResponse
     */
    'user': EncodableUser;
}
/**
 * 
 * @export
 * @interface ResendVerificationBody
 */
export interface ResendVerificationBody {
    /**
     * 
     * @type {string}
     * @memberof ResendVerificationBody
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateInformationBody
 */
export interface UpdateInformationBody {
    /**
     * 
     * @type {string}
     * @memberof UpdateInformationBody
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateInformationBody
     */
    'username'?: string | null;
}
/**
 * 
 * @export
 * @interface VerificationBody
 */
export interface VerificationBody {
    /**
     * 
     * @type {string}
     * @memberof VerificationBody
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof VerificationBody
     */
    'verification_code': number;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginCredentials} loginCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginCredentials: LoginCredentials, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginCredentials' is not null or undefined
            assertParamExists('login', 'loginCredentials', loginCredentials)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCredentials, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenBody} refreshTokenBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (refreshTokenBody: RefreshTokenBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenBody' is not null or undefined
            assertParamExists('logout', 'refreshTokenBody', refreshTokenBody)
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenBody} refreshTokenBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (refreshTokenBody: RefreshTokenBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenBody' is not null or undefined
            assertParamExists('refresh', 'refreshTokenBody', refreshTokenBody)
            const localVarPath = `/api/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterUserBody} registerUserBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (registerUserBody: RegisterUserBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserBody' is not null or undefined
            assertParamExists('registerUser', 'registerUserBody', registerUserBody)
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendVerificationBody} resendVerificationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendVerificationCode: async (resendVerificationBody: ResendVerificationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendVerificationBody' is not null or undefined
            assertParamExists('resendVerificationCode', 'resendVerificationBody', resendVerificationBody)
            const localVarPath = `/api/v1/auth/resend-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendVerificationBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerificationBody} verificationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmail: async (verificationBody: VerificationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationBody' is not null or undefined
            assertParamExists('verifyUserEmail', 'verificationBody', verificationBody)
            const localVarPath = `/api/v1/auth/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verificationBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginCredentials} loginCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginCredentials: LoginCredentials, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginCredentials, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshTokenBody} refreshTokenBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(refreshTokenBody: RefreshTokenBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(refreshTokenBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshTokenBody} refreshTokenBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(refreshTokenBody: RefreshTokenBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshTokenBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.refresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterUserBody} registerUserBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(registerUserBody: RegisterUserBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(registerUserBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResendVerificationBody} resendVerificationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendVerificationCode(resendVerificationBody: ResendVerificationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendVerificationCode(resendVerificationBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.resendVerificationCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VerificationBody} verificationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUserEmail(verificationBody: VerificationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyUserEmail(verificationBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.verifyUserEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: RawAxiosRequestConfig): AxiosPromise<GetMeResponse> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginCredentials} loginCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginCredentials: LoginCredentials, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(loginCredentials, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenBody} refreshTokenBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(refreshTokenBody: RefreshTokenBody, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.logout(refreshTokenBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenBody} refreshTokenBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(refreshTokenBody: RefreshTokenBody, options?: RawAxiosRequestConfig): AxiosPromise<RefreshResponse> {
            return localVarFp.refresh(refreshTokenBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterUserBody} registerUserBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(registerUserBody: RegisterUserBody, options?: RawAxiosRequestConfig): AxiosPromise<RegisterUserResponse> {
            return localVarFp.registerUser(registerUserBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendVerificationBody} resendVerificationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendVerificationCode(resendVerificationBody: ResendVerificationBody, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.resendVerificationCode(resendVerificationBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerificationBody} verificationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmail(verificationBody: VerificationBody, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.verifyUserEmail(verificationBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getMe(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginCredentials} loginCredentials 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public login(loginCredentials: LoginCredentials, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).login(loginCredentials, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshTokenBody} refreshTokenBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logout(refreshTokenBody: RefreshTokenBody, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logout(refreshTokenBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshTokenBody} refreshTokenBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refresh(refreshTokenBody: RefreshTokenBody, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refresh(refreshTokenBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterUserBody} registerUserBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerUser(registerUserBody: RegisterUserBody, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registerUser(registerUserBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendVerificationBody} resendVerificationBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public resendVerificationCode(resendVerificationBody: ResendVerificationBody, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).resendVerificationCode(resendVerificationBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerificationBody} verificationBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyUserEmail(verificationBody: VerificationBody, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyUserEmail(verificationBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TripsApi - axios parameter creator
 * @export
 */
export const TripsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTripBody} createTripBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrip: async (createTripBody: CreateTripBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTripBody' is not null or undefined
            assertParamExists('createTrip', 'createTripBody', createTripBody)
            const localVarPath = `/api/v1/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTripBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrip: async (tripId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripId' is not null or undefined
            assertParamExists('getTrip', 'tripId', tripId)
            const localVarPath = `/api/v1/trips/{trip_id}`
                .replace(`{${"trip_id"}}`, encodeURIComponent(String(tripId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrips: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripsApi - functional programming interface
 * @export
 */
export const TripsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TripsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTripBody} createTripBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrip(createTripBody: CreateTripBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrip(createTripBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.createTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrip(tripId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTripResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrip(tripId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.getTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrips(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTripsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrips(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.getTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TripsApi - factory interface
 * @export
 */
export const TripsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TripsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTripBody} createTripBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrip(createTripBody: CreateTripBody, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.createTrip(createTripBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrip(tripId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetTripResponse> {
            return localVarFp.getTrip(tripId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrips(options?: RawAxiosRequestConfig): AxiosPromise<GetTripsResponse> {
            return localVarFp.getTrips(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TripsApi - object-oriented interface
 * @export
 * @class TripsApi
 * @extends {BaseAPI}
 */
export class TripsApi extends BaseAPI {
    /**
     * 
     * @param {CreateTripBody} createTripBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public createTrip(createTripBody: CreateTripBody, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).createTrip(createTripBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tripId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public getTrip(tripId: string, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).getTrip(tripId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public getTrips(options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).getTrips(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload or replace a user\'s profile picture
         * @param {string} userId ID of the user whose profile picture is being changed
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeProfilePicture: async (userId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('changeProfilePicture', 'userId', userId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('changeProfilePicture', 'file', file)
            const localVarPath = `/api/v1/users/{user_id}/profile-picture`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/api/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/api/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UpdateInformationBody} updateInformationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, updateInformationBody: UpdateInformationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'updateInformationBody' is not null or undefined
            assertParamExists('updateUser', 'updateInformationBody', updateInformationBody)
            const localVarPath = `/api/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInformationBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {PasswordUpdateRequest} passwordUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: async (userId: string, passwordUpdateRequest: PasswordUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserPassword', 'userId', userId)
            // verify required parameter 'passwordUpdateRequest' is not null or undefined
            assertParamExists('updateUserPassword', 'passwordUpdateRequest', passwordUpdateRequest)
            const localVarPath = `/api/v1/users/{user_id}/password`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload or replace a user\'s profile picture
         * @param {string} userId ID of the user whose profile picture is being changed
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeProfilePicture(userId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeProfilePicture(userId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.changeProfilePicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {UpdateInformationBody} updateInformationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, updateInformationBody: UpdateInformationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, updateInformationBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {PasswordUpdateRequest} passwordUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPassword(userId: string, passwordUpdateRequest: PasswordUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPassword(userId, passwordUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateUserPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload or replace a user\'s profile picture
         * @param {string} userId ID of the user whose profile picture is being changed
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeProfilePicture(userId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.changeProfilePicture(userId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetUserResponse> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: RawAxiosRequestConfig): AxiosPromise<GetUsersResponse> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {UpdateInformationBody} updateInformationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, updateInformationBody: UpdateInformationBody, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.updateUser(userId, updateInformationBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {PasswordUpdateRequest} passwordUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword(userId: string, passwordUpdateRequest: PasswordUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<OkResponse> {
            return localVarFp.updateUserPassword(userId, passwordUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Upload or replace a user\'s profile picture
     * @param {string} userId ID of the user whose profile picture is being changed
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public changeProfilePicture(userId: string, file: File, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).changeProfilePicture(userId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(userId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(userId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {UpdateInformationBody} updateInformationBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: string, updateInformationBody: UpdateInformationBody, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(userId, updateInformationBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {PasswordUpdateRequest} passwordUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserPassword(userId: string, passwordUpdateRequest: PasswordUpdateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserPassword(userId, passwordUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



